#+SETUPFILE: setup.org

* Contents                                                         :toc_4_gh:
 - [[#namespace-thingdomuslog][Namespace: thi.ng.domus.log]]
     - [[#logging-function-generator-macro][Logging function generator macro]]
     - [[#logging-functions][Logging functions]]
     - [[#complete-namespace-definitions][Complete namespace definitions]]

* Namespace: thi.ng.domus.log

** Logging function generator macro

#+BEGIN_SRC clojure :noweb-ref log-macro
  (defmacro deflogfn
    [fn-name level]
    (let [prefix (.toUpperCase (name fn-name))]
      `(defn ~fn-name
         [& msg#]
         (when (<= ~'log-level ~level)
           (.log js/console (js/Date.) (clojure.string/join " " (cons ~prefix msg#)))))))
#+END_SRC

** Logging functions

#+BEGIN_SRC clojure :noweb-ref log
  (def ^:export log-level 1)

  (deflogfn debug  1)

  (deflogfn info   2)

  (deflogfn warn   3)

  (deflogfn severe 4)
#+END_SRC

** Complete namespace definitions

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/domus/log.clj :noweb yes :mkdirp yes :padline no
  (ns thi.ng.domus.log
   (:require
    [clojure.string]))

  <<log-macro>>
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/domus/log.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.domus.log
    (:require-macros
     [thi.ng.domus.log :refer [deflogfn]])
    (:require
     [clojure.string]))

  (enable-console-print!)

  <<log>>
#+END_SRC
